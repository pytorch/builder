name: Validate linux binaries

on:
  workflow_call:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: string
  workflow_dispatch:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: choice
        options:
          - release
          - nightly
          - test
          - all

jobs:
  generate-linux-conda-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: conda
      os: linux
      channel: ${{ inputs.channel }}
  generate-linux-wheel-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux
      channel: ${{ inputs.channel }}
  generate-linux-libtorch-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: libtorch
      os: linux
      channel: ${{ inputs.channel }}

  validate-linux-binaries-conda:
    needs: generate-linux-conda-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-linux-conda-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    steps:
      - name: Validate binary conda
        uses: pytorch/builder/.github/actions/validate-binary@main
        with:
          gpu_arch_type: ${{ matrix.gpu_arch_type }}
          gpu_arch_ver: ${{ matrix.gpu_arch_version }}
          installation: ${{ matrix.installation }}
          python_version: ${{ matrix.python_version }}
  validate-linux-binaries-wheels:
    needs: generate-linux-wheel-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-linux-wheel-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    steps:
      - name: Validate binary wheel
        uses: pytorch/builder/.github/actions/validate-binary@main
        with:
          gpu_arch_type: ${{ matrix.gpu_arch_type }}
          gpu_arch_ver: ${{ matrix.gpu_arch_version }}
          installation: ${{ matrix.installation }}
          python_version: ${{ matrix.python_version }}
  validate-linux-libtorch-binaries:
    needs: generate-linux-libtorch-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-linux-libtorch-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: "ubuntu-20.04"
    env:
      PYTHON_VERSION: ${{ matrix.python_version }}
    steps:
      - name: Install pytorch and smoke test
        env:
          INSTALLATION: ${{ matrix.installation }}
          ENV_NAME: conda-env-${{ github.run_id }}
        run: |
          sudo apt-get install unzip -y
          set -ex
          curl ${INSTALLATION} -o libtorch.zip
          unzip libtorch.zip
