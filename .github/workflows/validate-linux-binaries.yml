name: Validate linux binaries

on:
  workflow_call:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: string
      ref:
        description: 'Reference to checkout, defaults to empty'
        default: ""
        required: false
        type: string
      torchonly:
        description: 'Validate torchonly'
        default: false
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: choice
        options:
          - release
          - nightly
          - test
          - all
      ref:
        description: 'Reference to checkout, defaults to empty'
        default: ""
        required: false
        type: string
      torchonly:
        description: 'Validate torchonly'
        default: false
        required: false
        type: boolean

jobs:
  generate-linux-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: all
      os: linux
      channel: ${{ inputs.channel }}

  linux:
    needs: generate-linux-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-linux-matrix.outputs.matrix) }}
      fail-fast: false
    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    name: ${{ matrix.build_name }}
    with:
      runner: ${{ matrix.validation_runner }}
      repository: "pytorch/builder"
      ref: ${{ inputs.ref || github.ref }}
      job-name: ${{ matrix.build_name }}
      binary-matrix: ${{ toJSON(matrix) }}
      script: |
        set -ex
        export ENV_NAME="conda-env-${{ github.run_id }}"
        export TORCH_ONLY=${{ inputs.torchonly }}
        export TARGET_OS="linux"
        eval "$(conda shell.bash hook)"

        # Special case PyPi installation package. And Install of PyPi package via poetry
        if [[ ${MATRIX_PACKAGE_TYPE} == "manywheel" && ${MATRIX_GPU_ARCH_VERSION} == "12.1" ]]; then
          source ./.github/scripts/validate_pipy.sh
          source ./.github/scripts/validate_poetry.sh
        fi

        # Standart case: Validate binaries
        source ./.github/scripts/validate_binaries.sh
