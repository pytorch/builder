name: Validate linux binaries

on:
  workflow_call:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: string
  workflow_dispatch:
    inputs:
      channel:
        description: "Channel to use (nightly, test, release, all)"
        required: true
        type: choice
        options:
          - release
          - nightly
          - test
          - all

jobs:
  generate-linux-conda-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: conda
      os: linux
      channel: ${{ inputs.channel }}
  generate-linux-wheel-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: wheel
      os: linux
      channel: ${{ inputs.channel }}
  generate-linux-libtorch-matrix:
    uses: pytorch/test-infra/.github/workflows/generate_binary_build_matrix.yml@main
    with:
      package-type: libtorch
      os: linux
      channel: ${{ inputs.channel }}

  linux-conda:
    needs: generate-linux-conda-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-linux-conda-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    steps:
      - name: Validate binary conda
        uses: pytorch/builder/.github/actions/validate-binary@main
        with:
          gpu_arch_type: ${{ matrix.gpu_arch_type }}
          gpu_arch_ver: ${{ matrix.gpu_arch_version }}
          installation: ${{ matrix.installation }}
          python_version: ${{ matrix.python_version }}
          desired_cuda: ${{ matrix.desired_cuda }}
          dev_toolset: ''
          package_type: conda
          target_os: linux

  linux-wheel:
    needs: generate-linux-wheel-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-linux-wheel-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    steps:
      - name: Validate binary wheel
        uses: pytorch/builder/.github/actions/validate-binary@main
        with:
          gpu_arch_type: ${{ matrix.gpu_arch_type }}
          gpu_arch_ver: ${{ matrix.gpu_arch_version }}
          installation: ${{ matrix.installation }}
          python_version: ${{ matrix.python_version }}
          desired_cuda: ${{ matrix.desired_cuda }}
          dev_toolset: ''
          package_type: wheel
          target_os: linux

  linux-libt:
    needs: generate-linux-libtorch-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-linux-libtorch-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.validation_runner }}
    env:
      PYTHON_VERSION: ${{ matrix.python_version }}
    steps:
      - name: Checkout PyTorch builder
        uses: actions/checkout@v2
      - name: Install Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python_version }}
          auto-update-conda: true
          miniconda-version: "latest"
          activate-environment: testenv
      - name: Install pytorch and smoke test
        shell: bash
        env:
          INSTALLATION: ${{ matrix.installation }}
          ENV_NAME: conda-env-${{ github.run_id }}
          DESIRED_PYTHON: ${{ matrix.python_version }}
          DESIRED_CUDA: ${{ matrix.desired_cuda }}
          DESIRED_DEVTOOLSET: ${{ matrix.devtoolset }}
          PACKAGE_TYPE: libtorch
        run: |
          sudo apt-get install unzip -y
          set -ex
          curl ${INSTALLATION} -o libtorch.zip
          unzip libtorch.zip
          conda create -yp ${ENV_NAME} python=${{ matrix.python_version }} numpy
          export LD_LIBRARY_PATH="$(dirname $(which python))/lib"
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib
          if [[ ${{ matrix.libtorch_variant }} == "static-with-deps" ]]; then
            conda run -p ${ENV_NAME} --cwd libtorch env LD_LIBRARY_PATH=${LD_LIBRARY_PATH} bash ./../check_binary.sh
          fi
          conda env remove -p ${ENV_NAME}
