--- CMakeLists.txt	2019-11-04 15:04:50.452110612 -0800
+++ CMakeLists.txt	2019-11-04 15:05:39.889521970 -0800
@@ -3,7 +3,7 @@
 # ----------------------------------------
 # to disable Fortran, set this to "off"
 # see also -DADD_ below
-option( USE_FORTRAN "Fortran is required for some tester checks, but can be disabled with reduced functionality" ON )
+option( USE_FORTRAN "Fortran is required for some tester checks, but can be disabled with reduced functionality" OFF )
 
 if (USE_FORTRAN)
     project( MAGMA C CXX Fortran )
@@ -62,6 +62,8 @@
     message( WARNING "The compiler ${CMAKE_CXX_COMPILER} doesn't support the -std=c++11 flag. Some code may not compile.")
 endif()
 
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libstdc++ -fno-exceptions")
+
 CHECK_C_COMPILER_FLAG("-std=c99" COMPILER_SUPPORTS_C99)
 if (COMPILER_SUPPORTS_C99)
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
@@ -88,15 +90,15 @@
 
 
 # ----------------------------------------
-# locate OpenMP
-find_package( OpenMP )
-if (OPENMP_FOUND)
-    message( STATUS "Found OpenMP" )
-    message( STATUS "    OpenMP_C_FLAGS   ${OpenMP_C_FLAGS}" )
-    message( STATUS "    OpenMP_CXX_FLAGS ${OpenMP_CXX_FLAGS}" )
-    set( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
-    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
-endif()
+# # locate OpenMP
+# find_package( OpenMP )
+# if (OPENMP_FOUND)
+#     message( STATUS "Found OpenMP" )
+#     message( STATUS "    OpenMP_C_FLAGS   ${OpenMP_C_FLAGS}" )
+#     message( STATUS "    OpenMP_CXX_FLAGS ${OpenMP_CXX_FLAGS}" )
+#     set( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
+#     set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
+# endif()
 
 
 # ----------------------------------------
@@ -119,7 +121,7 @@
     set( NV_SM    "" )
     set( NV_COMP  "" )
 
-    set(CUDA_SEPARABLE_COMPILATION ON)
+    set(CUDA_SEPARABLE_COMPILATION OFF)
 
     # nvcc >= 6.5 supports -std=c++11, so propagate CXXFLAGS to NVCCFLAGS.
     # Older nvcc didn't support -std=c++11, so previously we disabled propagation.
@@ -259,11 +261,18 @@
         message( STATUS "    compile for CUDA arch 7.5 (Turing)" )
     endif()
 
+    if ( ${GPU_TARGET} MATCHES "All")
+      set( MIN_ARCH 370)
+      SET( NV_SM -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_70,code=sm_70 )
+      SET( NV_COMP "")
+    endif()
+    
     if (NOT MIN_ARCH)
         message( FATAL_ERROR "GPU_TARGET must contain one or more of Fermi, Kepler, Maxwell, Pascal, Volta, Turing, or valid sm_[0-9][0-9]" )
     endif()
 
-        set( CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -Xcompiler -fPIC -DHAVE_CUBLAS ${NV_SM} ${NV_COMP} ${FORTRAN_CONVENTION} )
+        set( CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS} -DHAVE_CUBLAS -Xfatbin -compress-all -Xcompiler -fPIC -std=c++11 ${NV_SM} ${NV_COMP} ${FORTRAN_CONVENTION} )
+        MESSAGE(STATUS "CUDA_NVCC_FLAGS: ${CUDA_NVCC_FLAGS}")
     add_definitions( "-DHAVE_CUBLAS -DMIN_CUDA_ARCH=${MIN_ARCH}" )
     message( STATUS "Define -DHAVE_CUBLAS -DMIN_CUDA_ARCH=${MIN_ARCH}" )
 endif()
@@ -277,7 +286,7 @@
 set( LAPACK_LIBRARIES "" CACHE STRING "Libraries for LAPACK and BLAS, to manually override search" )
 if ("${LAPACK_LIBRARIES}" STREQUAL "")
     message( STATUS "Searching for BLAS and LAPACK. To override, set LAPACK_LIBRARIES using ccmake." )
-    find_package( LAPACK )
+    # find_package( LAPACK )
     # force showing updated LAPACK_LIBRARIES in ccmake / cmake-gui.
     set( LAPACK_LIBRARIES ${LAPACK_LIBRARIES} CACHE STRING "Libraries for LAPACK and BLAS, to manually override search" FORCE )
 else()
@@ -405,7 +414,7 @@
     #message( "libmagma_all_f   ${libmagma_all_f}"   )
 
     # on Windows, Fortran files aren't compiled if listed here...
-    cuda_add_library( magma ${libmagma_all_cpp} )
+    cuda_add_library( magma STATIC ${libmagma_all_cpp} OPTIONS --compiler-options "-fPIC")
     target_link_libraries( magma
         ${LAPACK_LIBRARIES}
         ${CUDA_CUDART_LIBRARY}
@@ -427,7 +436,7 @@
     ## make list of Fortran .mod files to install, as below
 else()
     # Unix doesn't seem to have a problem with mixing C, CUDA, and Fortran files
-    cuda_add_library( magma ${libmagma_all} )
+    cuda_add_library( magma STATIC ${libmagma_all} OPTIONS --compiler-options "-fPIC")
     target_link_libraries( magma
         ${blas_fix}
         ${LAPACK_LIBRARIES}
@@ -446,43 +455,43 @@
     endforeach()
 endif()
 add_custom_target( lib DEPENDS magma )
+set_target_properties(magma PROPERTIES POSITION_INDEPENDENT_CODE ON)
 
-
-# ----------------------------------------
-# compile lapacktest library
-# If use fortran, compile only Fortran files, not magma_[sdcz]_no_fortran.cpp
-# else,           compile only C++     files, not Fortran files
-if (USE_FORTRAN)
-    foreach( f ${liblapacktest_all} )
-        if (${f} MATCHES "\\.(f|f90|F90)$")
-            list( APPEND liblapacktest_all_f ${f} )
-        endif()
-    endforeach()
-    add_library( lapacktest ${liblapacktest_all_f} )
-else()
-    # alternatively, use only C/C++/CUDA files, including magma_[sdcz]_no_fortran.cpp
-    foreach( f ${liblapacktest_all} )
-        if (${f} MATCHES "\\.(c|cu|cpp)$")
-            list( APPEND liblapacktest_all_cpp ${f} )
-        endif()
-    endforeach()
-    add_library( lapacktest ${liblapacktest_all_cpp} )
-endif()
-target_link_libraries( lapacktest
-    ${blas_fix}
-    ${LAPACK_LIBRARIES}
-)
-
-
-# ----------------------------------------
-# compile tester library
-add_library( tester ${libtest_all} )
-target_link_libraries( tester
-    magma
-    lapacktest
-    ${blas_fix}
-    ${LAPACK_LIBRARIES}
-)
+# # ----------------------------------------
+# # compile lapacktest library
+# # If use fortran, compile only Fortran files, not magma_[sdcz]_no_fortran.cpp
+# # else,           compile only C++     files, not Fortran files
+# if (USE_FORTRAN)
+#     foreach( f ${liblapacktest_all} )
+#         if (${f} MATCHES "\\.(f|f90|F90)$")
+#             list( APPEND liblapacktest_all_f ${f} )
+#         endif()
+#     endforeach()
+#     add_library( lapacktest ${liblapacktest_all_f} )
+# else()
+#     # alternatively, use only C/C++/CUDA files, including magma_[sdcz]_no_fortran.cpp
+#     foreach( f ${liblapacktest_all} )
+#         if (${f} MATCHES "\\.(c|cu|cpp)$")
+#             list( APPEND liblapacktest_all_cpp ${f} )
+#         endif()
+#     endforeach()
+#     add_library( lapacktest ${liblapacktest_all_cpp} )
+# endif()
+# target_link_libraries( lapacktest
+#     ${blas_fix}
+#     ${LAPACK_LIBRARIES}
+# )
+
+
+# # ----------------------------------------
+# # compile tester library
+# add_library( tester ${libtest_all} )
+# target_link_libraries( tester
+#     magma
+#     lapacktest
+#     ${blas_fix}
+#     ${LAPACK_LIBRARIES}
+# )
 
 
 # ----------------------------------------
@@ -492,7 +501,7 @@
 include_directories( sparse/include )
 include_directories( sparse/control )
 include_directories( testing )
-cuda_add_library( magma_sparse ${libsparse_all} )
+cuda_add_library( magma_sparse STATIC ${libsparse_all} OPTIONS --compiler-options "-fPIC")
 target_link_libraries( magma_sparse
     magma
     ${blas_fix}
@@ -503,45 +512,45 @@
 )
 add_custom_target( sparse-lib DEPENDS magma_sparse )
 
-
+set_target_properties(magma_sparse PROPERTIES POSITION_INDEPENDENT_CODE ON)
 # ----------------------------------------
-# compile each tester
+# # compile each tester
 
-# save testers to testing/
-# save tester lib files to testing_lib/ to avoid cluttering lib/
-set( CMAKE_RUNTIME_OUTPUT_DIRECTORY testing )
-set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY testing_lib )
-set( CMAKE_LIBRARY_OUTPUT_DIRECTORY testing_lib )
-
-# skip Fortran testers, which require an extra file from CUDA
-foreach( f ${testing_all} )
-    if (${f} MATCHES "\\.(c|cu|cpp)$")
-        list( APPEND testing_all_cpp ${f} )
-    endif()
-endforeach()
-foreach( TEST ${testing_all_cpp} )
-    string( REGEX REPLACE "\\.(cpp|f90|F90)" "" EXE ${TEST} )
-    string( REGEX REPLACE "testing/" "" EXE ${EXE} )
-    #message( "${TEST} --> ${EXE}" )
-    add_executable( ${EXE} ${TEST} )
-    target_link_libraries( ${EXE} tester lapacktest magma )
-    list( APPEND testing ${EXE} )
-endforeach()
-add_custom_target( testing DEPENDS ${testing} )
-
-
-# ----------------------------------------
-# compile each sparse tester
-set( CMAKE_RUNTIME_OUTPUT_DIRECTORY sparse/testing )
-foreach( TEST ${sparse_testing_all} )
-    string( REGEX REPLACE "\\.(cpp|f90|F90)"     "" EXE ${TEST} )
-    string( REGEX REPLACE "sparse/testing/" "" EXE ${EXE} )
-    #message( "${TEST} --> ${EXE}" )
-    add_executable( ${EXE} ${TEST} )
-    target_link_libraries( ${EXE} magma_sparse magma )
-    list( APPEND sparse-testing ${EXE} )
-endforeach()
-add_custom_target( sparse-testing DEPENDS ${sparse-testing} )
+# # save testers to testing/
+# # save tester lib files to testing_lib/ to avoid cluttering lib/
+# set( CMAKE_RUNTIME_OUTPUT_DIRECTORY testing )
+# set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY testing_lib )
+# set( CMAKE_LIBRARY_OUTPUT_DIRECTORY testing_lib )
+
+# # skip Fortran testers, which require an extra file from CUDA
+# foreach( f ${testing_all} )
+#     if (${f} MATCHES "\\.(c|cu|cpp)$")
+#         list( APPEND testing_all_cpp ${f} )
+#     endif()
+# endforeach()
+# foreach( TEST ${testing_all_cpp} )
+#     string( REGEX REPLACE "\\.(cpp|f90|F90)" "" EXE ${TEST} )
+#     string( REGEX REPLACE "testing/" "" EXE ${EXE} )
+#     #message( "${TEST} --> ${EXE}" )
+#     add_executable( ${EXE} ${TEST} )
+#     target_link_libraries( ${EXE} tester lapacktest magma )
+#     list( APPEND testing ${EXE} )
+# endforeach()
+# add_custom_target( testing DEPENDS ${testing} )
+
+
+# # ----------------------------------------
+# # compile each sparse tester
+# set( CMAKE_RUNTIME_OUTPUT_DIRECTORY sparse/testing )
+# foreach( TEST ${sparse_testing_all} )
+#     string( REGEX REPLACE "\\.(cpp|f90|F90)"     "" EXE ${TEST} )
+#     string( REGEX REPLACE "sparse/testing/" "" EXE ${EXE} )
+#     #message( "${TEST} --> ${EXE}" )
+#     add_executable( ${EXE} ${TEST} )
+#     target_link_libraries( ${EXE} magma_sparse magma )
+#     list( APPEND sparse-testing ${EXE} )
+# endforeach()
+# add_custom_target( sparse-testing DEPENDS ${sparse-testing} )
 
 
 # ----------------------------------------
@@ -551,7 +560,7 @@
          LIBRARY DESTINATION lib
          ARCHIVE DESTINATION lib )
 file( GLOB headers include/*.h sparse/include/*.h )
-install( FILES ${headers} ${modules}
+install( FILES ${headers} 
          DESTINATION include )
 
 # ----------------------------------------
@@ -565,9 +574,9 @@
 string( REPLACE ";" " " LIBS
         "${blas_fix_lib} ${LAPACK_LIBS} ${CUDA_CUDART_LIBRARY} ${CUDA_CUBLAS_LIBRARIES} ${CUDA_cusparse_LIBRARY}" )
 set( MAGMA_REQUIRED "" )
-configure_file( "${pkgconfig}.in" "${pkgconfig}" @ONLY )
-install( FILES "${CMAKE_BINARY_DIR}/${pkgconfig}"
-         DESTINATION lib/pkgconfig )
+# configure_file( "${pkgconfig}.in" "${pkgconfig}" @ONLY )
+# install( FILES "${CMAKE_BINARY_DIR}/${pkgconfig}"
+#          DESTINATION lib/pkgconfig )
 
 # ----------------------------------------
 get_directory_property( compile_definitions COMPILE_DEFINITIONS )
