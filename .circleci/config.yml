version: 2.1

orbs:
  win: circleci/windows@1.0.0

binary_common: &binary_common
  parameters:
    # Edit these defaults to do a release`
    build_version:
      description: "version number of release binary; by default, build a nightly"
      type: string
      default: ""
    pytorch_version:
      description: "PyTorch version to build against; by default, use a nightly"
      type: string
      default: ""
    # Don't edit these
    python_version:
      description: "Python version to build against (e.g., 3.7)"
      type: string
    cu_version:
      description: "CUDA version to build against, in CU format (e.g., cpu or cu100)"
      type: string
    unicode_abi:
      description: "Python 2.7 wheel only: whether or not we are cp27mu (default: no)"
      type: string
      default: ""
    wheel_docker_image:
      description: "Wheel only: what docker image to use"
      type: string
      default: "soumith/manylinux-cuda100"
    is-python3:
      description: "Precomputation of whether this Python version is >= 3, for use as a 'when' conditional"
      type: boolean
      default: false
    is-macos:
      description: "Precomputation of whether the OS is MacOS, for use as a 'when' conditional"
      type: boolean
      default: false
    run-external-projects:
      description: "Should external projects be tested in addition to PyTorch examples. Run on a smaller set of envs."
      type: boolean
      default: false
  environment:
    PYTHON_VERSION: << parameters.python_version >>
    BUILD_VERSION: << parameters.build_version >>
    PYTORCH_VERSION: << parameters.pytorch_version >>
    UNICODE_ABI: << parameters.unicode_abi >>
    CU_VERSION: << parameters.cu_version >>


jobs:
  circleci_consistency:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          command: |
            pip install --user --progress-bar off -r .circleci/requirements.txt
            python .circleci/regenerate.py
            git diff --exit-code || (echo ".circleci/config.yml not in sync with config.yml.in! Run .circleci/regenerate.py to update config"; exit 1)

  ffmpeg_linux:
    <<: *binary_common
    docker:
      - image: "pytorch/conda-cuda"
    resource_class: 2xlarge+
    steps:
      - checkout
      - run:
          name: Build FFmpeg recipe
          command: |
            ffmpeg/build_ci.sh
      - persist_to_workspace:
          root: ffmpeg
          paths:
            - output/*

  ffmpeg_mac:
    <<: *binary_common
    macos:
      xcode: "9.0"
    steps:
      - checkout
      - run:
          name: Install Anaconda
          command: |
            curl -o conda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
            sh conda.sh -b
            source $HOME/miniconda3/bin/activate
            conda install -yq conda-build

            # Fixes "OSError: [Errno 13] Permission denied: '/usr/local/man'"
            # see https://github.com/tqdm/tqdm/issues/460#issuecomment-365787522
            sudo mkdir -p /usr/local/man
            sudo chown -R "$USER:admin" /usr/local/man

            brew install wget
      - run:
          name: Build FFmpeg recipe
          command: |
            .circleci/helper-scripts/wrap-with-conda-activation-macos.sh ffmpeg/build_ci.sh
      - persist_to_workspace:
          root: ffmpeg
          paths:
            - output/*

  ffmpeg_win:
    <<: *binary_common
    executor:
      name: win/vs2019
      shell: powershell.exe
    steps:
      - checkout
      - run:
          name: Build FFmpeg recipe
          command: |
            .circleci/helper-scripts/wrap-with-windows-conda.ps1 ffmpeg/build_ci.sh
      - persist_to_workspace:
          root: ffmpeg
          paths:
            - output/*

  ffmpeg_upload:
    <<: *binary_common
    docker:
      - image: "pytorch/conda-cuda"
    resource_class: 2xlarge+
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Upload FFmpeg packages to PyTorch Anaconda channel
          command: |
            anaconda -t "${CONDA_PYTORCHBOT_TOKEN}" upload -u pytorch --force $(find /tmp/workspace -name "ffmpeg*.bz2" -type f)


workflows:
  ffmpeg:
    jobs:
      - ffmpeg_linux:
          cu_version: cpu
          is-python3: true
          python_version: '3.7'
      - ffmpeg_mac:
          cu_version: cpu
          is-python3: true
          name: ffmpeg_mac
          python_version: '3.7'
      - ffmpeg_win:
          cu_version: cpu
          is-python3: true
          name: ffmpeg_win
          python_version: '3.7'
      - hold:
          type: approval
          requires:
            - ffmpeg_linux
            - ffmpeg_mac
            - ffmpeg_win
      - ffmpeg_upload:
          context: org-member
          cu_version: cpu
          is-python3: true
          name: ffmpeg_upload
          python_version: '3.7'
          requires:
            - hold
